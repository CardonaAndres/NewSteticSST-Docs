# Bloque de eventos: requerido por Nginx, se usa para configuración global de procesos de eventos
events {}

http {
    # ---------------------------
    # Definición de upstreams
    # ---------------------------
    # Estos bloques definen los servidores backend a los que Nginx hará proxy_pass
    upstream staff_api {
        server staff:3002;   # Microservicio "staff" corriendo en el contenedor staff puerto 3002
    }

    upstream reports_manager_api {
        server reports-manager:3003;   # Microservicio "reports-manager" corriendo en su contenedor
    }

    # ---------------------------
    # Mapeo de origenes permitidos para CORS
    # ---------------------------
    # La directiva 'map' evalúa el origen de la petición ($http_origin)
    # y lo asigna a la variable $cors_origin si es permitido.
    # Si el origen no coincide con los permitidos, se devuelve vacío.
    map $http_origin $cors_origin {
        default "";  # Orígenes no permitidos devolverán vacío
        "http://localhost:5001" $http_origin;  # Origen permitido (frontend local)
    }

    # ---------------------------
    # Configuración del servidor
    # ---------------------------
    server {
        listen 80;              # Puerto en el que escucha Nginx
        server_name localhost;  # Nombre del servidor (host virtual)

        # ---------------------------
        # Configuración global de CORS
        # ---------------------------
        # Agrega headers CORS a todas las respuestas, usando la variable $cors_origin
        # 'always' asegura que se agreguen incluso en respuestas de error
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, Origin, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # ---------------------------
        # Manejo de peticiones preflight (OPTIONS)
        # ---------------------------
        # Retorna 204 No Content sin pasar al backend
        if ($request_method = OPTIONS) {
            return 204;
        }

        # ---------------------------
        # Location para microservicio "staff"
        # ---------------------------
        location /API-SST/v1/ {
            # Oculta los headers CORS que puedan venir desde el microservicio
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Credentials;

            # Redirige todas las peticiones a upstream "staff_api"
            proxy_pass http://staff_api;

            # Pasa el host original y la IP del cliente al backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # ---------------------------
        # Location para microservicio "reports-manager"
        # ---------------------------
        location /API-SST/v1/reports {
            # Oculta los headers CORS que puedan venir desde el microservicio
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Credentials;

            # Redirige todas las peticiones a upstream "reports_manager_api"
            proxy_pass http://reports_manager_api;

            # Pasa el host original y la IP del cliente al backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}
